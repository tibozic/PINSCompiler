source -> definitions .

definitions -> definition definitions2 .
definitions2 -> .
definitions2 -> ";" definitions .

definition -> function_definition .
definition -> type_definition .
definition -> variable_definition .
		   	  
type_definition -> typ identifier ":" type .

type -> identifier .
type -> logical .
type -> integer .
type -> string .
type -> arr "[" int_const "]" type .

function_definition -> fun identifier "(" parameters ")" ":" type "=" expression .

parameters -> parameter parameters2 .
parameters2 -> .
parameters2 -> "," parameter parameters2 .

parameter -> identifier ":" type .

expression -> logical_ior_expression expression2 .
expression2 -> .
expression2 -> "{" WHERE definitions "}" .

logical_ior_expression -> logical_and_expression logical_ior_expression2 .
logical_ior_expression2 -> .
logical_ior_expression2 -> "|" logical_ior_expression .

logical_and_expression -> compare_expression logical_and_expression2 .
logical_and_expression2 -> .
logical_and_expression2 -> "&" logical_and_expression .

compare_expression -> additive_expression compare_expression2 .
compare_expression2 -> "==" additive_expression .
compare_expression2 -> "!=" additive_expression .
compare_expression2 -> "<=" additive_expression .
compare_expression2 -> ">=" additive_expression .
compare_expression2 -> "<"  additive_expression .
compare_expression2 -> ">"  additive_expression .
compare_expression2 -> .

additive_expression -> multiplicative_expression additive_expression2 .
additive_expression2 -> .
additive_expression2 -> "+" additive_expression .
additive_expression2 -> "-" additive_expression .

multiplicative_expression -> prefix_expression multiplicative_expression2 .
multiplicative_expression2 -> .
multiplicative_expression2 -> "*" multiplicative_expression .
multiplicative_expression2 -> "/" multiplicative_expression .
multiplicative_expression2 -> "%" multiplicative_expression .

prefix_expression -> "+" prefix_expression .
prefix_expression -> "-" prefix_expression .
prefix_expression -> "!" prefix_expression .
prefix_expression -> postfix_expression .

postfix_expression -> atom_expression postfix_expression2 .
postfix_expression2 -> .
postfix_expression2 -> "[" expression "]" postfix_expression2 .

atom_expression -> log_constant .
atom_expression -> int_constant .
atom_expression -> str_constant .
atom_expression -> "(" expressions ")" .
atom_expression -> "{" atom_expression2 .
atom_expression -> identifier atom_expression4 .

atom_expression4 -> .
atom_expression4 -> "(" expressions ")" .

atom_expression2 -> while expression ":" expression "}" .
atom_expression2 -> for identifier "=" expression "," expression "," expression ":" expression "}" .
atom_expression2 -> if expression then expression atom_expression5 .
atom_expression2 -> expression "=" expression "}" .

atom_expression5 -> "}" .
atom_expression5 -> else expression "}" .

expressions -> expression expressions2 .
expressions2 -> .
expressions2 -> "," expressions .

variable_definition -> var identifier ":" type .
